/**
 * @license Angular v8.0.2
 * (c) 2010-2019 Google LLC. https://angular.io/
 * License: MIT
 */

import {
  CompileMetadataResolver,
  CompilerConfig,
  CompileReflector,
  JitEvaluator,
  NgModuleCompiler,
  ResourceLoader,
  StyleCompiler,
  SummaryResolver,
  TemplateParser,
  ViewCompiler
} from '@angular/compiler';
import {
  Compiler,
  CompilerFactory,
  CompilerOptions,
  ComponentFactory,
  Injector,
  ModuleWithComponentFactories,
  NgModuleFactory,
  PlatformRef,
  Provider,
  StaticProvider,
  Type,
  Version,
  ɵConsole
} from '@angular/core';

/**
 * @publicApi
 */
export declare class JitCompilerFactory implements CompilerFactory {
  private _defaultOptions;

  createCompiler(options?: CompilerOptions[]): Compiler;
}

/**
 * @publicApi
 */
export declare const platformBrowserDynamic: (extraProviders?: StaticProvider[] | undefined) => PlatformRef;

/**
 * @publicApi
 */
export declare const RESOURCE_CACHE_PROVIDER: Provider[];

/**
 * @publicApi
 */
export declare const VERSION: Version;

/**
 * An implementation of ResourceLoader that uses a template cache to avoid doing an actual
 * ResourceLoader.
 *
 * The template cache needs to be built and loaded into window.$templateCache
 * via a separate mechanism.
 *
 * @publicApi
 */
export declare class ɵangular_packages_platform_browser_dynamic_platform_browser_dynamic_a extends ResourceLoader {
  private _cache;

  constructor();

  get(url: string): Promise<string>;
}

export declare class ɵCompilerImpl implements Compiler {
  readonly injector: Injector;
  private _metadataResolver;
  private _delegate;
  private getExtraNgModuleProviders;

  constructor(injector: Injector, _metadataResolver: CompileMetadataResolver, templateParser: TemplateParser, styleCompiler: StyleCompiler, viewCompiler: ViewCompiler, ngModuleCompiler: NgModuleCompiler, summaryResolver: SummaryResolver<Type<any>>, compileReflector: CompileReflector, jitEvaluator: JitEvaluator, compilerConfig: CompilerConfig, console: ɵConsole);

  compileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T>;

  compileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>>;

  compileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T>;

  compileModuleAndAllComponentsAsync<T>(moduleType: Type<T>): Promise<ModuleWithComponentFactories<T>>;

  loadAotSummaries(summaries: () => any[]): void;

  hasAotSummary(ref: Type<any>): boolean;

  getComponentFactory<T>(component: Type<T>): ComponentFactory<T>;

  clearCache(): void;

  clearCacheFor(type: Type<any>): void;

  getModuleId(moduleType: Type<any>): string | undefined;
}

/**
 * @publicApi
 */
export declare const ɵINTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS: StaticProvider[];

/**
 * A platform that included corePlatform and the compiler.
 *
 * @publicApi
 */
export declare const ɵplatformCoreDynamic: (extraProviders?: StaticProvider[] | undefined) => PlatformRef;

export declare class ɵResourceLoaderImpl extends ResourceLoader {
  get(url: string): Promise<string>;
}

export {};
