import {Operator} from '../Operator';
import {Subscriber} from '../Subscriber';
import {Subscription} from '../Subscription';
import {OuterSubscriber} from '../OuterSubscriber';
import {InnerSubscriber} from '../InnerSubscriber';
import {MonoTypeOperatorFunction, ObservableInput, OperatorFunction, SchedulerLike} from '../types';

export declare function expand<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, R>;
export declare function expand<T>(project: (value: T, index: number) => ObservableInput<T>, concurrent?: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;

export declare class ExpandOperator<T, R> implements Operator<T, R> {
  private project;
  private concurrent;
  private scheduler;

  constructor(project: (value: T, index: number) => ObservableInput<R>, concurrent: number, scheduler: SchedulerLike);

  call(subscriber: Subscriber<R>, source: any): any;
}

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
export declare class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {
  private static dispatch;
  private project;
  private concurrent;
  private scheduler;
  private index;
  private active;
  private hasCompleted;
  private buffer;
  private subscribeToProjection;

  constructor(destination: Subscriber<R>, project: (value: T, index: number) => ObservableInput<R>, concurrent: number, scheduler: SchedulerLike);

  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number, innerSub: InnerSubscriber<T, R>): void;

  notifyComplete(innerSub: Subscription): void;

  protected _next(value: any): void;

  protected _complete(): void;
}
